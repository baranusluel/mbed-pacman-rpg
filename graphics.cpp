#include "graphics.h"

#include "globals.h"

//TODO: Buffer of entire screen and checking whether there was a change pixel-by-pixel

static int player_sprite_right[121] = {
0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000,
0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000,
0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000,
0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000,
0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000,
0x000000, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000
};
static int player_sprite_left[121];
static int player_sprite_up[121];
static int player_sprite_down[121];

static int wall_sprite[121] = {
0x0089ff, 0x0e77d2, 0x0089ff, 0x0089ff, 0x000000, 0x0089ff, 0x0089ff, 0x1d7aec, 0x0089ff, 0x000000, 0x0e77d2,
0x0089ff, 0x0089ff, 0x1d7aec, 0x1d7aec, 0x000000, 0x0089ff, 0x0e77d2, 0x0089ff, 0x0089ff, 0x000000, 0x0089ff,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x0089ff, 0x000000, 0x0089ff, 0x1d7aec, 0x0089ff, 0x0e77d2, 0x000000, 0x0089ff, 0x0e77d2, 0x0089ff, 0x0089ff,
0x0089ff, 0x000000, 0x0089ff, 0x0089ff, 0x0e77d2, 0x0089ff, 0x000000, 0x0089ff, 0x0089ff, 0x1d7aec, 0x0e77d2,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x0089ff, 0x0e77d2, 0x0089ff, 0x0089ff, 0x000000, 0x0089ff, 0x0e77d2, 0x0089ff, 0x1d7aec, 0x000000, 0x0089ff,
0x1d7aec, 0x0089ff, 0x0089ff, 0x0e77d2, 0x000000, 0x0089ff, 0x0089ff, 0x0e77d2, 0x0089ff, 0x000000, 0x1d7aec,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x1d7aec, 0x000000, 0x0e77d2, 0x0089ff, 0x0089ff, 0x1d7aec, 0x000000, 0x0089ff, 0x0e77d2, 0x0089ff, 0x0089ff,
0x0089ff, 0x000000, 0x0089ff, 0x0089ff, 0x0e77d2, 0x0089ff, 0x000000, 0x1d7aec, 0x0089ff, 0x0089ff, 0x0e77d2
};

static int dot_sprite[121] = {
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000,
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000,
0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0xffffff, 0xffffff, 0xffffff, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

static int ghost_sprite_red[121] = {
0x000000, 0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0x000000,
0x000000, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0x000000,
0x000000, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0xffffff, 0xffffff, 0xffffff, 0xff0000, 0x000000,
0xff0000, 0xff0000, 0x000000, 0xffffff, 0xffffff, 0xff0000, 0x000000, 0xffffff, 0xffffff, 0xff0000, 0xff0000,
0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0xff0000, 0xffffff, 0xff0000, 0xff0000, 0xff0000,
0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000, 0xff0000,
0xff0000, 0xff0000, 0xff0000, 0x000000, 0xff0000, 0xff0000, 0xff0000, 0x000000, 0xff0000, 0xff0000, 0xff0000,
0x000000, 0xff0000, 0x000000, 0x000000, 0x000000, 0xff0000, 0x000000, 0x000000, 0x000000, 0xff0000, 0x000000
};
static int ghost_sprite_yellow[121] = {
0x000000, 0x000000, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0x000000,
0x000000, 0xffff00, 0xffff00, 0xffffff, 0xffff00, 0xffff00, 0xffff00, 0xffffff, 0xffff00, 0xffff00, 0x000000,
0x000000, 0xffff00, 0xffffff, 0xffffff, 0xffffff, 0xffff00, 0xffffff, 0xffffff, 0xffffff, 0xffff00, 0x000000,
0xffff00, 0xffff00, 0x000000, 0xffffff, 0xffffff, 0xffff00, 0x000000, 0xffffff, 0xffffff, 0xffff00, 0xffff00,
0xffff00, 0xffff00, 0xffff00, 0xffffff, 0xffff00, 0xffff00, 0xffff00, 0xffffff, 0xffff00, 0xffff00, 0xffff00,
0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00,
0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00,
0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00, 0xffff00,
0xffff00, 0xffff00, 0xffff00, 0x000000, 0xffff00, 0xffff00, 0xffff00, 0x000000, 0xffff00, 0xffff00, 0xffff00,
0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000, 0x000000, 0x000000, 0xffff00, 0x000000
};
static int ghost_sprite_aqua[121] = {
0x000000, 0x000000, 0x000000, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x000000, 0x000000,
0x000000, 0x00ffff, 0x00ffff, 0xffffff, 0x00ffff, 0x00ffff, 0x00ffff, 0xffffff, 0x00ffff, 0x00ffff, 0x000000,
0x000000, 0x00ffff, 0xffffff, 0xffffff, 0xffffff, 0x00ffff, 0xffffff, 0xffffff, 0xffffff, 0x00ffff, 0x000000,
0x00ffff, 0x00ffff, 0x000000, 0xffffff, 0xffffff, 0x00ffff, 0x000000, 0xffffff, 0xffffff, 0x00ffff, 0x00ffff,
0x00ffff, 0x00ffff, 0x00ffff, 0xffffff, 0x00ffff, 0x00ffff, 0x00ffff, 0xffffff, 0x00ffff, 0x00ffff, 0x00ffff,
0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff,
0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff,
0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff, 0x00ffff,
0x00ffff, 0x00ffff, 0x00ffff, 0x000000, 0x00ffff, 0x00ffff, 0x00ffff, 0x000000, 0x00ffff, 0x00ffff, 0x00ffff,
0x000000, 0x00ffff, 0x000000, 0x000000, 0x000000, 0x00ffff, 0x000000, 0x000000, 0x000000, 0x00ffff, 0x000000
};

static int portal_sprite[121] = {
0x000000, 0x000000, 0x000000, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x000000, 0x000000,
0x000000, 0x2008db, 0x2008db, 0x7b6bf3, 0x7b6bf3, 0x7b6bf3, 0x7b6bf3, 0x2008db, 0x2008db, 0x2008db, 0x000000,
0x2008db, 0x2008db, 0x7b6bf3, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x7b6bf3, 0x2008db, 0x2008db, 0x2008db,
0x2008db, 0x7b6bf3, 0x2008db, 0x2008db, 0x7b6bf3, 0x7b6bf3, 0x2008db, 0x2008db, 0x7b6bf3, 0x2008db, 0x2008db,
0x7b6bf3, 0x2008db, 0x2008db, 0x7b6bf3, 0x2008db, 0x2008db, 0x7b6bf3, 0x2008db, 0x7b6bf3, 0x2008db, 0x2008db,
0x7b6bf3, 0x2008db, 0x2008db, 0x7b6bf3, 0x2008db, 0x7b6bf3, 0x2008db, 0x2008db, 0x7b6bf3, 0x2008db, 0x2008db,
0x7b6bf3, 0x2008db, 0x2008db, 0x7b6bf3, 0x2008db, 0x2008db, 0x2008db, 0x7b6bf3, 0x2008db, 0x2008db, 0x2008db,
0x000000, 0x2008db, 0x2008db, 0x2008db, 0x7b6bf3, 0x7b6bf3, 0x7b6bf3, 0x2008db, 0x2008db, 0x2008db, 0x000000,
0x000000, 0x000000, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x2008db, 0x000000, 0x000000, 0x000000
};

void draw_player(int u, int v, int key, int dir)
{
    switch (dir) {
        case 0:
            uLCD.BLIT(u, v, 11, 11, player_sprite_right);
            break;
        case 1:
            uLCD.BLIT(u, v, 11, 11, player_sprite_down);
            break;
        case 2:
            uLCD.BLIT(u, v, 11, 11, player_sprite_left);
            break;
        case 3:
            uLCD.BLIT(u, v, 11, 11, player_sprite_up);
            break;
    }
}

void draw_ghost(int u, int v, int color)
{
    switch (color) {
        case 0:
            uLCD.BLIT(u, v, 11, 11, ghost_sprite_red);
            break;
        case 1:
            uLCD.BLIT(u, v, 11, 11, ghost_sprite_yellow);
            break;
        case 2:
            uLCD.BLIT(u, v, 11, 11, ghost_sprite_aqua);
            break;
    }
}

void init_sprites() {
    flip_lr(player_sprite_right, player_sprite_left);
    transpose(player_sprite_right, player_sprite_down);
    flip_ud(player_sprite_down, player_sprite_up);
}

void transpose(int *sprite, int *out)
{
    for (int i = 0; i < 11; i++) {
        for (int j = 0; j < 11; j++) {
            out[i*11+j] = sprite[j*11+i];
        }
    }
}

void flip_lr(int *sprite, int *out)
{
    for (int i = 0; i < 11; i++) {
        for (int j = 0; j < 11; j++) {
            out[i*11+10-j] = sprite[i*11+j];
        }
    }
}

void flip_ud(int *sprite, int *out)
{
    for (int i = 0; i < 11; i++) {
        for (int j = 0; j < 11; j++) {
            out[(10-i)*11+j] = sprite[i*11+j];
        }
    }
}

// The following colors are defined in uLCD_4DGL.h:
// WHITE, BLACK, RED, GREEN, BLUE, LGREY, DGREY

#define YELLOW 0xFFFF00
#define BROWN  0xD2691E
#define DIRT   BROWN

void draw_img(int u, int v, const char* img)
{
    int colors[11*11];
    for (int i = 0; i < 11*11; i++)
    {
        if (img[i] == 'R') colors[i] = RED;
        else if (img[i] == 'Y') colors[i] = YELLOW;
        else if (img[i] == 'G') colors[i] = GREEN;
        else if (img[i] == 'D') colors[i] = DIRT;
        else if (img[i] == '5') colors[i] = LGREY;
        else if (img[i] == '3') colors[i] = DGREY;
        else colors[i] = BLACK;
    }
    uLCD.BLIT(u, v, 11, 11, colors);
    wait_us(250); // Recovery time!
}

void draw_nothing(int u, int v)
{
    // Fill a tile with blackness
    uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);
}

void draw_wall(int u, int v)
{
    uLCD.BLIT(u, v, 11, 11, wall_sprite);
}

void draw_dot(int u, int v)
{
    //uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);
    //uLCD.filled_circle(u+5, v+5, 3, WHITE);
    uLCD.BLIT(u, v, 11, 11, dot_sprite);
}

void draw_tree(int u, int v)
{
    uLCD.filled_rectangle(u, v, u+10, v+10, BLACK);
    uLCD.pixel(u+5, v+5, WHITE);
}

void draw_portal(int u, int v)
{
    uLCD.BLIT(u, v, 11, 11, portal_sprite);
}

void draw_upper_status(int x, int y, int isOmni, int power)
{
    // Draw bottom border of status bar
    uLCD.line(0, 9, 127, 9, BLUE);

    // Add other status info drawing code here
    if (isOmni) {
        uLCD.filled_rectangle(0, 0, 127, 8, RED);
    } else {
        uLCD.filled_rectangle(0, 0, 127, 8, BLACK);
    }

    uLCD.locate(0,0);
    uLCD.color(WHITE);
    uLCD.set_font(FONT_7X8);
    uLCD.text_mode(TRANSPARENT);
    uLCD.printf("(%D,%D) Power:%D", x, y, power);
}

void draw_lower_status(int map)
{
    // Draw top border of status bar
    uLCD.line(0, 118, 127, 118, BLUE);
    uLCD.filled_rectangle(0, 119, 127, 127, BLACK);

    // Add other status info drawing code here
    uLCD.locate(0,15);
    
    uLCD.color(WHITE);
    uLCD.set_font(FONT_7X8);
    uLCD.text_mode(TRANSPARENT);
    uLCD.printf("%S Map", map ? "Quest" : "Main");
}

void draw_border()
{
    uLCD.filled_rectangle(0,     9, 127,  14, YELLOW); // Top
    uLCD.filled_rectangle(0,    13,   2, 114, YELLOW); // Left
    uLCD.filled_rectangle(0,   114, 127, 117, YELLOW); // Bottom
    uLCD.filled_rectangle(124,  14, 127, 117, YELLOW); // Right
}

